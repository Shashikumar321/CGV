#include<GL/glut.h>

GLfloat view[] = { 0.0,3.0,8.0 };

GLint flag = 0;
GLint c = 0;

GLfloat mx1 = 0.0;
GLfloat my1 = 0.0;
GLfloat mx2 = 0.0;
GLfloat my2 = 0.0;
GLfloat mx3 = 0.0;
GLfloat my3 = 0.0;
GLfloat mx4 = 0.0;
GLfloat my4 = 0.0;
GLfloat mx5 = 0.0;
GLfloat my5 = 0.0;
GLfloat mx6 = 0.0;
GLfloat my6 = 0.0;
GLfloat mx7 = 0.0;
GLfloat my7 = 0.0;
GLfloat mx8 = 0.0;
GLfloat my8 = 0.0;
GLfloat mx9 = 0.0;
GLfloat my9 = 0.0;
GLfloat mx10 = 0.0;
GLfloat my10 = 0.0;
GLfloat mx11 = 0.0;
GLfloat my11 = 0.0;
GLfloat mx12 = 0.0;
GLfloat my12 = 0.0;
GLfloat mx13 = 0.0;
GLfloat my13 = 0.0;
GLfloat mx14 = 0.0;
GLfloat my14 = 0.0;




GLfloat mat_ambient[] = { 0.7f,0.7f,0.7f,1.0f };
GLfloat mat_specular[] = { 1.0f,1.0f,1.0f,1.0f };
GLfloat mat_shininess[] = { 50.0f };
GLfloat mat_diffuse[] = { 0.6f,0.67f,0.67f,1.0f };


GLfloat lightint[] = { 1.0f,1.0f,1.0f,1.0f };
GLfloat lightpos[] = { 0.0f,6.0f,0.0f,0.0f };

GLfloat lightint1[] = { 0.8f,0.8f,0.8f,1.0f };
GLfloat lightpos1[] = { 0.0f,0.0f,0.6f,0.0f };

GLfloat lightint2[] = { 0.8f,0.8f,0.8f,1.0f };
GLfloat lightpos2[] = { 0.0f,5.0f,0.0f,0.0f };

GLfloat nodes_diffuse[] = { 1.0,1.0,1.0,1.0 };
GLfloat lines_diffuse[] = { 0.0,0.0,0.0,1.0 };
GLfloat text_diffuse[] = { 1.0,1.0,1.0,1.0 };
GLfloat nodes1_diffuse[] = { 0.0,0.0,1.0,1.0 };
GLfloat body_diffuse[] = { 0.0,0.844,0.0,1.0 };
GLfloat head_diffuse[] = { 1.0,0.844,0.0,1.0 };
GLfloat arms_diffuse[] = { 1.0,0.844,0.0,1.0 };
GLfloat legs_diffuse[] = { 1.0,0.844,0.0,1.0 };



void display();
void nodes();
void robo();
void keys(unsigned char, int, int);


void nodes()
{
	glPushMatrix();
	glTranslatef(0.0, 0.0, 0.0);
	glutSolidSphere(0.3,20,20);
	glPopMatrix();
}


void robo()
{
	//body
	glPushMatrix();
	glMaterialfv(GL_FRONT, GL_DIFFUSE, body_diffuse);
	glTranslatef(0.0, 0.0, 0.0);
	glScalef(0.2, 1.0, 0.2);
	glutSolidCube(0.5);
	glPopMatrix();
}


void keys(unsigned char key, int x, int y)
{
	if (key == '6')
	{
		view[0] += 0.5;
		if (view[0] > 10.0)
			view[0] = 10.0;
	}
	if (key == '4')
	{
		view[0] -= 0.5;
		if (view[0] < -10.0)
			view[0] = -10.0;
	}

	if (key == '8')
	{
		view[1] += 0.5;
		if (view[1] > 8.0)
			view[1] = 8.0;
	}
	if (key == '2')
	{
		view[1] -= 0.5;
		if (view[1] < -3.0)
			view[1] = -3.0;
	}


	if (key == '5')
	{
		view[2] += 0.5;
		if (view[2] > 10.0)
			view[2] = 10.0;
	}
	if (key == '0')
	{
		view[2] -= 0.5;
		if (view[2] < -10.0)
			view[2] = -10.0;
	}
	display();
}
void display()
{

	glLightfv(GL_LIGHT1, GL_POSITION, lightpos);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, lightint);

	glLightfv(GL_LIGHT1, GL_POSITION, lightpos1);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, lightint1);

	glLightfv(GL_LIGHT1, GL_POSITION, lightpos2);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, lightint2);

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();


	gluLookAt(view[0], view[1], view[2], 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);





	//robo


	//r12
	if (flag == 0)
	{
		glPushMatrix();
		glTranslatef(0.0, 4.3, 0.3);

		glTranslatef(-mx1, -my1, 0.0);
		mx1 += 0.002;
		my1 += 0.002;
		if ((mx1 > 2) && (my1 > 2))
		{
			mx1 = 2;
			my1 = 2;
			flag++;
			c++;
		}

		robo();
		glPopMatrix();
	}



	//r23
	if (flag == 1)
	{
		glPushMatrix();
		glTranslatef(-2.1, 2.3, 0.3);

		glTranslatef(-mx2, -my2, 0.0);
		mx2 += 0.001;
		my2 += 0.002;
		if (mx2 > 1.1)
		{
			mx2 = 2;
			my2 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}



	//r35
	if (flag == 2)
	{
		glPushMatrix();
		glTranslatef(-3.1, 0.0, 0.3);

		glTranslatef(0.0, -my3, 0.0);
		my3 += 0.002;
		if (my3 > 2.2)
		{
			mx2 = 2;
			my2 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}


	
	//r53
	if (flag == 3)
	{
		glPushMatrix();
		glTranslatef(-3.1, -2.0, 0.3);

		glTranslatef(0.0, my4, 0.0);
		my4 += 0.002;
		if (my4 > 2)
		{
			mx4 = 2;
			my4 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}



	//r32
	if (flag == 4)
	{
		glPushMatrix();
		glTranslatef(-3.1, 0.0, 0.3);

		glTranslatef(mx5, my5, 0.0);
		mx5 += 0.001;
		my5 += 0.002;
		if (mx5 > 1.2)
		{
			mx5 = 2;
			my5 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}



	//r24
	if (flag == 5)
	{
		glPushMatrix();
		glTranslatef(-2.0, 2.3, 0.3);

		glTranslatef(mx6, -my6, 0.0);
		mx6 += 0.0013;
		my6 += 0.002;
		if (mx6 > 1.3)
		{
			mx6 = 2;
			my6 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}




	//r42
	if (flag == 6)
	{
		glPushMatrix();
		glTranslatef(-0.65, 0.0, 0.3);

		glTranslatef(-mx7, my7, 0.0);
		mx7 += 0.001;
		my7 += 0.002;
		if (mx7 > 1.20)
		{
			mx7 = 2;
			my7 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}




	//r21
	if (flag == 7)
	{
		glPushMatrix();
		glTranslatef(-2.00, 2.3, 0.3);

		glTranslatef(mx8, my8, 0.0);
		mx8 += 0.002;
		my8 += 0.002;
		if (mx8 > 2)
		{
			mx8 = 2;
			my8 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}




	//r16
	if (flag == 8)
	{
		glPushMatrix();
		glTranslatef(0.0, 4.3, 0.3);

		glTranslatef(mx9, -my9, 0.0);
		mx9 += 0.002;
		my9 += 0.002;
		if (mx9 > 1.8)
		{
			mx9 = 2;
			my9 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}




	//r67
	if (flag == 9)
	{
		glPushMatrix();
		glTranslatef(2.0, 2.3, 0.3);

		glTranslatef(-mx10, -my10, 0.0);
		mx10 += 0.0013;
		my10 += 0.002;
		if (mx10 > 1.5)
		{
			mx10 = 2;
			my10 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}



	//r76
	if (flag == 10)
	{
		glPushMatrix();
		glTranslatef(0.7, 0.0, 0.3);

		glTranslatef(mx11, my11, 0.0);
		mx11 += 0.001;
		my11 += 0.002;
		if (mx11 > 1.3)
		{
			mx11 = 2;
			my11 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}



	//r68
	if (flag == 11)
	{
		glPushMatrix();
		glTranslatef(2.0, 2.3, 0.3);

		glTranslatef(mx12, -my12, 0.0);
		mx12 += 0.001;
		my12 += 0.002;
		if (mx12 > 1.1)
		{
			mx12 = 2;
			my12 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}




	//r35
	if (flag == 12)
	{
		glPushMatrix();
		glTranslatef(3.1, 0.0, 0.3);

		glTranslatef(0.0, -my13, 0.0);
		my13 += 0.002;
		if (my13 > 2.2)
		{
			mx13 = 2;
			my13 = 2;
			flag++;
			c++;
		}
		robo();
		glPopMatrix();
	}
	if (flag == 13)
	{
		glPushMatrix();
		glTranslatef(3.4, -2.0, 0.3);
		robo();
		glPopMatrix();

		char dest[] = " DESTINATION ";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(3.2, -2.64, 0.3);
		for (int i = 0; i < 15; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, dest[i]);
		}

	}





		//1
	if (c>= 0)
	{
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
		glTranslatef(0.0, 4.0, 0.0);
		nodes();
		glPopMatrix();
	
	}

	else
	{

		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
		glTranslatef(0.0, 4.0, 0.0);
		nodes();
		glPopMatrix();

	}

		char node1[] = "1";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(-0.05, 3.7, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node1[i]);
		}




		//2
		if (c >= 1)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(-2.0, 2.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(-2.0, 2.0, 0.0);
			nodes();
			glPopMatrix();
		}
		char node2[] = "2";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(-2.0, 1.8, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node2[i]);
		}





		//3
		if (c >= 2)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(-3.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{
			glPushMatrix();		
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(-3.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		char node3[] = "3";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(-3.0, -0.2, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node3[i]);
		}




		//4
		if (c >= 6)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(-1.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{

			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(-1.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		char node4[] = "4";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(-1.0, -0.2, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node4[i]);
		}




		//5
		if (c >= 3)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(-3.0, -2.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(-3.0, -2.0, 0.0);
			nodes();
			glPopMatrix();

		}
		char node5[] = "5";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(-3.0, -2.1, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node5[i]);
		}




		//6
		if (c >= 9)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(2.0, 2.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(2.0, 2.0, 0.0);
			nodes();
			glPopMatrix();

		}
		char node6[] = "6";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(1.85, 1.8, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node6[i]);
		}




		//7
		if (c >= 10)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(1.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(1.0, 0.0, 0.0);
			nodes();
			glPopMatrix();

		}
		char node7[] = "7";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(0.9, -0.2, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node7[i]);
		}




		//8
		if (c >= 12)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(3.0, 0.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{

			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glTranslatef(3.0, 0.0, 0.0);
			nodes();
			glPopMatrix();

		}
		char node8[] = "8";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(2.85, -0.2, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node8[i]);
		}



		//9
		if (c >= 13)
		{
			glPushMatrix();
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes_diffuse);
			glMaterialfv(GL_FRONT, GL_DIFFUSE, nodes1_diffuse);
			glTranslatef(3.0, -2.0, 0.0);
			nodes();
			glPopMatrix();
		}
		else
		{

			glPushMatrix();
			glTranslatef(3.0, -2.0, 0.0);
			nodes();
			glPopMatrix();

		}
		char node9[] = "9";
		glMaterialfv(GL_FRONT, GL_DIFFUSE, text_diffuse);
		glRasterPos3f(2.85, -2.1, 0.3);
		for (int i = 0; i < 1; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, node9[i]);
		}





		//l12
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(0.0, 4.0, 0.0);
		glVertex3f(-2.0, 2.0, 0.0);
		glEnd();
		glPopMatrix();


		//l16
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(0.0, 4.0, 0.0);
		glVertex3f(2.0, 2.0, 0.0);
		glEnd();
		glPopMatrix();


		//l23
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(-2.0, 2.0, 0.0);
		glVertex3f(-3.0, 0.0, 0.0);
		glEnd();
		glPopMatrix();


		//l24
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(-2.0, 2.0, 0.0);
		glVertex3f(-1.0, 0.0, 0.0);
		glEnd();
		glPopMatrix();



		//l35
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(-3.0, 0.0, 0.0);
		glVertex3f(-3.0, -2.0, 0.0);
		glEnd();
		glPopMatrix();



		//l67
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(2.0, 2.0, 0.0);
		glVertex3f(1.0, 0.0, 0.0);
		glEnd();
		glPopMatrix();


		
		//l68
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(2.0, 2.0, 0.0);
		glVertex3f(3.0, 0.0, 0.0);
		glEnd();
		glPopMatrix();



		//l89
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_DIFFUSE, lines_diffuse);
		glLineWidth(2.0);
		glBegin(GL_LINES);
		glVertex3f(3.0, 0.0, 0.0);
		glVertex3f(3.0, -2.0, 0.0);
		glEnd();
		glPopMatrix();
	





		glFlush();
		glutSwapBuffers();

}



void init()
{

	glClearColor(1.0, 0.844, 0.1, 1.0);


}


void reshape(int w, int h)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(75, 1000 / 700, 1, 1000);
	glMatrixMode(GL_MODELVIEW);
}


int main(int argc, char** argv)
{

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(1000, 700);
	glutInitWindowPosition(160, 0);
	glutCreateWindow("DFS");
	init();
	glutDisplayFunc(display);
	glutIdleFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keys);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT1);
	glShadeModel(GL_SMOOTH);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_NORMALIZE);

	glViewport(0, 0, 1000, 700);
	glutMainLoop();
	return 0;
}
