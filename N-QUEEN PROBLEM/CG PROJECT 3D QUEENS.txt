
#include<GL/glut.h>

static GLdouble view[] = { 0.0,6.0,10.0 };

GLfloat c1 = 0.0;
GLfloat c2 = 0.0;
GLfloat c3 = 0.0;
GLfloat c4 = 0.0;
GLfloat c5 = 0.0;
GLfloat w1 = 0.0;
GLfloat w2 = 0.0;
GLfloat w1s = 0.03;
GLfloat m1 = 0.0;
GLfloat m2 = 0.0;

GLint close = 0;
GLint tim = 1;
GLint flag = 0;
int i;

GLdouble red = 1.0, green = 1.0, blue = 1.0;
GLdouble red0 = 0.0, green0 = 0.0, blue0 = 0.0;
GLdouble red1 = 1.0, green1 = 0.844, blue1 = 0.0;
GLdouble redb = 0.93, greenb = 0.91, blueb = 1.0;

GLdouble sx = 0.2, sy = 0.35, sz = 0.2;

GLUquadricObj *quadObj;

void wall();
void size(GLint);
void bench();
void sun();
void moon();
void window();
void windisplay();
void display();
void robo();
void table();
void board();
void theme();
void queen();
void reset();
void exit();
void qcolor();
void mainmenu();
void star();
void win();
void background();
void time(GLint);
void timedisplay();
void winright();
void winleft();
void smallrobo();
void firstdisplay();
void help();
void controls();
void clock();
void win(GLint);
void keys(unsigned char, int, int);
void arrows(int,int,int);


void smallrobo()
{
	//body
	glPushMatrix();
	glColor3f(0.12, 0.54, 0.37);
	glTranslatef(0.0, 0.0, 5.0);
	glScalef(0.4, 0.8, 0.2);
	glutSolidCube(1.0);
	glPopMatrix();

	//head
	glPushMatrix();
	glColor3f(0.2, 0.4, 0.55);
	glTranslatef(0.0, 0.6, 5.0);
	glScalef(0.25, 0.3, 0.2);
	glutSolidCube(1.0);
	glPopMatrix();

	//righteye
	glPushMatrix();
	glColor3f(0.9, 0.0, 0.8);
	glTranslatef(0.07, 0.67, 5.09);
	glutSolidSphere(0.03, 10, 10);
	glPopMatrix();

	//lefteye
	glPushMatrix();
	glColor3f(0.9, 0.0, 0.8);
	glTranslatef(-0.07, 0.67, 5.09);
	glutSolidSphere(0.03, 10, 10);
	glPopMatrix();


	//mouth
	glPushMatrix();
	glColor3f(0.52, 0.0, 0.5);
	glTranslatef(0.0, 0.55, 5.09);
	glScalef(0.05, 0.0015, 0.05);
	glutSolidCube(1.0);
	glPopMatrix();

	//righthand
	glPushMatrix();
	glColor3f(0.52, 0.0, 0.5);
	glTranslatef(0.27, 0.11, 5.0);
	glScalef(0.1, 0.6, 0.1);
	glutSolidCube(1.0);
	glPopMatrix();

	//lefthand
	glPushMatrix();
	glColor3f(0.52, 0.0, 0.5);
	glTranslatef(-0.27, 0.11, 5.0);
	glScalef(0.1, 0.6, 0.1);
	glutSolidCube(1.0);
	glPopMatrix();


	//rightleg
	glPushMatrix();
	glColor3f(0.2, 0.0, 0.6);
	glTranslatef(0.11, -0.75, 5.0);
	glScalef(0.15, 0.6, 0.1);
	glutSolidCube(1.0);
	glPopMatrix();

	//leftleg
	glPushMatrix();
	glColor3f(0.2, 0.0, 0.6);
	glTranslatef(-0.11, -0.75, 5.0);
	glScalef(0.15, 0.6, 0.1);
	glutSolidCube(1.0);
	glPopMatrix();

}


void robo()
{
	//right robo


	//HAT
	glPushMatrix();
	glColor3f(0.54, 0.14, 0.86);
	glTranslatef(4.0, 3.7, 0.0);
	glScalef(0.5, 0.5, 0.5);
	glutSolidSphere(0.8, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.58, 0.14, 0.87);
	glTranslatef(4.0, 3.6, 0.0);
	glRotatef(90, 1, 0, 0);
	glScalef(1.0, 1.0, 1.0);
	glutSolidTorus(0.2, 0.3, 20, 20);
	glPopMatrix();




	//head
	glPushMatrix();
	glColor3f(0.89, 0.7, 0.56);
	glTranslatef(4.0, 3.0, 0.0);
	glRotatef(-15, 0.0, 0.0, 1.0);
	glScalef(0.5, 0.8, 0.6);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();



	//right eye
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(3.6, 3.2, -0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(3.57, 3.18, -0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(0.7, 20, 20);
	glPopMatrix();



	//left eye
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(3.6, 3.2, 0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(3.57, 3.18, 0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(0.7, 20, 20);
	glPopMatrix();




	//mouth
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(3.55, 2.75, 0.0);
	glScalef(0.1, 0.1, 0.18);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();



	//back
	glPushMatrix();
	glColor3f(0.52, 0.54, 0.9);
	glTranslatef(4.0, 0.4, 0.0);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.6, 0.5, 1.4);
	glutSolidCube(1.5);
	glPopMatrix();


	//right arm
	glPushMatrix();
	glColor3f(0.45, 0.5, 0.6);
	glTranslatef(4.0, 1.0, -1.3);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(1.5, 0.4, 0.3);
	glutSolidCube(1.5);
	glPopMatrix();

	//left arm
	glPushMatrix();
	glColor3f(0.45, 0.5, 0.6);
	glTranslatef(4.0, 1.0, 1.3);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(1.5, 0.4, 0.26);
	glutSolidCube(1.5);
	glPopMatrix();

	//right hand
	glPushMatrix();
	glColor3f(0.89, 0.7, 0.56);
	glTranslatef(3.5, -0.2, -1.3);
	glRotatef(25, 0.0, 0.0, 1.0);
	glScalef(1.0, 0.4, 0.26);
	glutSolidCube(1.5);
	glPopMatrix();



	//left hand
	glPushMatrix();
	glColor3f(0.89, 0.7, 0.56);
	glTranslatef(3.5, -0.2, 1.3);
	glRotatef(25, 0.0, 0.0, 1.0);
	glScalef(1.0, 0.4, 0.3);
	glutSolidCube(1.5);
	glPopMatrix();
	



	//right lap
	glPushMatrix();
	glColor3f(0.64, 0.49, 0.36);
	glTranslatef(3.3, -0.8, -0.7);
	glScalef(1.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//left lap
	glPushMatrix();
	glColor3f(0.64, 0.49, 0.36);
	glTranslatef(3.3, -0.8, 0.65);
	glScalef(1.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//right leg
	glPushMatrix();
	glColor3f(0.64, 0.49, 0.36);
	glTranslatef(2.1, -2.25, -0.7);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//left leg
	glPushMatrix();
	glColor3f(0.64, 0.49, 0.36);
	glTranslatef(2.1, -2.25, 0.65);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//right shoe
	glPushMatrix();
	glColor3f(0.45, 0.6, 0.65);
	glTranslatef(1.4, -4.15, -0.7);
	glScalef(0.6, 0.36, 0.45);
	glutSolidCube(1.5);
	glPopMatrix();

	//left shoe
	glPushMatrix();
	glColor3f(0.45, 0.6, 0.65);
	glTranslatef(1.4, -4.15, 0.65);
	glScalef(0.6, 0.36, 0.45);
	glutSolidCube(1.5);
	glPopMatrix();




	//left robo



	//HAT
	glPushMatrix();
	glColor3f(0.54, 0.14, 0.8);
	glTranslatef(-3.9, 3.7, 0.0);
	glScalef(0.5, 0.5, 0.5);
	glutSolidSphere(0.8, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.54, 0.14, 0.86);
	glTranslatef(-3.9, 3.6, 0.0);
	glRotatef(90, 1, 0, 0);
	glScalef(1.0, 1.0, 1.0);
	glutSolidTorus(0.2, 0.3, 20, 20);
	glPopMatrix();

	//head
	glPushMatrix();
	glColor3f(0.9, 0.78, 0.6);
	glTranslatef(-4.0, 3.0, 0.0);
	glRotatef(-15, 0.0, 0.0, 1.0);
	glScalef(0.5, 0.8, 0.6);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();


	//right eye
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(-3.55, 3.2, -0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(-3.52, 3.18, -0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(0.7, 20, 20);
	glPopMatrix();



	//left eye
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(-3.55, 3.2, 0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(-3.52, 3.18, 0.2);
	glScalef(0.1, 0.1, 0.1);
	glutSolidSphere(0.7, 20, 20);
	glPopMatrix();


	//mouth
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.9);
	glTranslatef(-3.64, 2.75, 0.0);
	glScalef(0.1, 0.1, 0.18);
	glutSolidSphere(1.0, 20, 20);
	glPopMatrix();



	//back
	glPushMatrix();
	glColor3f(0.4, 0.54, 0.9);
	glTranslatef(-4.0, 0.4, 0.0);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.6, 0.5, 1.4);
	glutSolidCube(1.5);
	glPopMatrix();



	//right arm
	glPushMatrix();
	glColor3f(0.74, 0.65, 0.54);
	glTranslatef(-4.0, 1.0, -1.3);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(1.5, 0.4, 0.26);
	glutSolidCube(1.5);
	glPopMatrix();

	//left arm
	glPushMatrix();
	glColor3f(0.74, 0.65, 0.54);
	glTranslatef(-4.0, 1.0, 1.3);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(1.5, 0.4, 0.26);
	glutSolidCube(1.5);
	glPopMatrix();

	//right hand
	glPushMatrix();
	glColor3f(0.9, 0.78, 0.6);
	glTranslatef(-3.5, -0.2, -1.3);
	glRotatef(-25, 0.0, 0.0, 1.0);
	glScalef(1.0, 0.4, 0.3);
	glutSolidCube(1.5);
	glPopMatrix();

	//left hand
	glPushMatrix();
	glColor3f(0.9, 0.78, 0.6);
	glTranslatef(-3.5, -0.2, 1.3);
	glRotatef(-25, 0.0, 0.0, 1.0);
	glScalef(1.0, 0.4, 0.3);
	glutSolidCube(1.5);
	glPopMatrix();

	//right lap
	glPushMatrix();
	glColor3f(0.56, 0.57, 0.6);
	glTranslatef(-3.3, -0.8, -0.7);
	glScalef(1.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//left lap
	glPushMatrix();
	glColor3f(0.56, 0.57, 0.6);
	glTranslatef(-3.3, -0.8, 0.65);
	glScalef(1.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//right leg
	glPushMatrix();
	glColor3f(0.56, 0.57, 0.6);
	glTranslatef(-2.1, -2.25, -0.7);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//left leg
	glPushMatrix();
	glColor3f(0.56, 0.57, 0.6);
	glTranslatef(-2.1, -2.25, 0.65);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.4, 0.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//right shoe
	glPushMatrix();
	glColor3f(0.45, 0.6, 0.65);
	glTranslatef(-1.4, -4.15, -0.7);
	glScalef(0.6, 0.36, 0.45);
	glutSolidCube(1.5);
	glPopMatrix();

	//left shoe
	glPushMatrix();
	glColor3f(0.45, 0.6, 0.65);
	glTranslatef(-1.4, -4.15, 0.65);
	glScalef(0.6, 0.36, 0.45);
	glutSolidCube(1.5);
	glPopMatrix();



}


void window()
{

	//animation

	glPushMatrix();
	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex3f(-54.0, -6.33, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(-54.0, 3.33, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(-40.0, 4.13, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-37.0, 4.63, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(-33.0, 3.13, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-30.0, 4.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-24.0, 2.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-20.0, 4.83, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(-15.0, 3.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-10.60, 4.2, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(-6.0, 3.83, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-3.0, 4.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(-1.0, 3.6, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(3.0, 4.8, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(5.0, 3.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(6.0, 3.83, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(10.60, 4.2, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(15.0, 3.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(20.0, 4.83, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(24.0, 2.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(30.0, 4.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(33.0, 3.13, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(34.0, 3.33, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(37.0, 4.63, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(49.0, 4.43, -10);
	glColor3f(0.0, 0.67, 0.46);
	glVertex3f(40.0, 4.13, -10);
	glColor3f(0.0, 1.0, 0.0);
	glVertex3f(54.0, 2.33, -10);
	glColor3f(0.0, 0.67, 0.0);
	glVertex3f(54.0, -6.33, -10);
	glEnd();
	glPopMatrix();

}


void background()
{
	glPushMatrix();
	glColor3f(redb, greenb, blueb);
	glTranslatef(0.0, 0.0, -15.0);
	glScalef(1.0, 1.0, 0.1);
	glutSolidCube(50.0);
	glPopMatrix();
}


void sun()
{
	//sun
	glPushMatrix();
	glColor3f(0.99, 0.8, 0.25);
	glTranslatef(-3.0, 4.6, -12);
	glutSolidSphere(0.5, 20, 20);
	glPopMatrix();

}


void moon()
{
	//moon
	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-2.5, 4.6, -12.0);
	glutSolidSphere(0.6, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.52, 0.35, 0.53);
	glTranslatef(-2.1, 4.65, -11);
	glutSolidSphere(0.6, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-4.8, 5.22, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-3.9, 4.75, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(0.0, 5.1, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(2.0, 4.665, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(3.0, 4.165, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(4.0, 5.665, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();






	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(5.8, 5.15, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(6.2, 4.75, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(6.9, 7.12, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(7.8, 4.365, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(7.6, 6.165, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(4.0, 7.665, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();




	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-5.8, 5.15, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-6.2, 4.75, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-2.4, 5.55, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-2.2, 4.35, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-6.9, 7.12, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-7.8, 4.365, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-7.6, 6.165, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();


	glPushMatrix();
	glColor3f(1.0, 1.0, 1.0);
	glTranslatef(-4.0, 7.665, -12.5);
	glutSolidSphere(0.05, 20, 20);
	glPopMatrix();



}


void winright()
{
	glPushMatrix();
	glColor3f(0.9, 0.25, 0.42);
	glTranslatef(4.95, 4.0, -2.65);

	glTranslatef(-m1, 0.0, 0.0);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(2.45, 0.1, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.38, 0.25, 0.32);
	glTranslatef(3.35, 3.35, -2.5);
	glTranslatef(-m1, 0.0, 0.0);

	glutSolidSphere(0.175, 20, 20);
	glPopMatrix();
}


void winleft()
{
	glPushMatrix();
	glColor3f(0.9, 0.25, 0.42);
	glTranslatef(-5.0, 4.0, -2.65);

	glTranslatef(m1, 0.0, 0.0);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(2.45, 0.1, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.38, 0.25, 0.32);
	glTranslatef(-3.35, 3.35, -2.5);
	glTranslatef(m1, 0.0, 0.0);

	glutSolidSphere(0.175, 20, 20);
	glPopMatrix();

}


void clock()
{
	glPushMatrix();
	glColor3f(0.5, 0.5, 0.5);
	glScalef(1.2, 0.2, 1.2);
	glutSolidSphere(1.5, 20, 20);
	glPopMatrix();

	//hour
	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(0.0, 0.3, 0.25);
	glScalef(0.1, 0.1, 0.8);
	glutSolidCube(1.0);
	glPopMatrix();

	//minute
	glPushMatrix();
	glColor3f(0.0, 0.0, 0.0);
	glTranslatef(0.5, 0.3, -0.25);
	glRotatef(120, 0, 1, 0);
	glScalef(0.1, 0.1, 1.2);
	glutSolidCube(1.0);
	glPopMatrix();


}


void wall()
{

	//front wall -y
	glPushMatrix();
	glColor3f(0.39, 0.58, 0.93);
	glTranslatef(0.0, -2.0, -2.5);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(6.5, 0.2, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.6, 0.55, 1.0);
	glTranslatef(0.0, 0.86, -2.55);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(4.8, 0.16, 0.2);
	glutSolidCube(1.5);
	glPopMatrix();




	//front wall +y
	glPushMatrix();
	glColor3f(0.39, 0.58, 0.93);
	glTranslatef(0.0, 8.5, -2.5);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(6.5, 0.2, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.6, 0.55, 1.0);
	glTranslatef(0.0, 5.6, -2.5);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(4.8, 0.16, 0.2);
	glutSolidCube(1.5);
	glPopMatrix();




	//front wall +x
	glPushMatrix();
	glColor3f(0.39, 0.58, 0.93);
	glTranslatef(5.0, 4.0, -2.5);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(1.8, 0.2, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.6, 0.55, 1.0);
	glTranslatef(3.72, 3.21, -2.55);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(0.15, 0.16, 3.0);
	glutSolidCube(1.5);
	glPopMatrix();



	//front wall -x
	glPushMatrix();
	glColor3f(0.39, 0.58, 0.93);
	glTranslatef(-5.0, 4.0, -2.5);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(1.8, 0.2, 4.0);
	glutSolidCube(1.5);
	glPopMatrix();


	glPushMatrix();
	glColor3f(0.6, 0.55, 1.0);
	glTranslatef(-3.72, 3.21, -2.55);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(0.15, 0.16, 3.0);
	glutSolidCube(1.5);
	glPopMatrix();





	//right wall
	glPushMatrix();
	glColor3f(0.45, 0.45, 0.85);
	glTranslatef(4.8, 1.5, 4.8);
	glRotatef(90, 0.0, 1.0, 0.0);
	glRotatef(-90, 1.0, 0.0, 0.0);
	glScalef(10.0, 0.2, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();

	//shelf
	glPushMatrix();
	glColor3f(0.3, 0.35, 0.7);
	glTranslatef(4.4, 6.0, 1.0);
	glScalef(1.0, 0.05, 1.5);
	glutSolidCube(1.5);
	glPopMatrix();

	//left
	glPushMatrix();
	glColor3f(0.45, 0.45, 0.85);
	glTranslatef(-4.8, 1.5, 4.8);
	glRotatef(-90, 0.0, 1.0, 0.0);
	glRotatef(90, 1.0, 0.0, 0.0);
	glScalef(10.0, 0.2, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();

	//floor

	glPushMatrix();
	glColor3f(0.55, 0.7, 0.9);
	glTranslatef(-0.07, -4.7, 4.8);
	glScalef(7.0, 0.2, 10.0);
	glutSolidCube(1.5);
	glPopMatrix();


	//top
	glPushMatrix();
	glColor3f(0.3, 0.45, 0.778);
	glTranslatef(-0.07, 7.7, 1.6);
	glScalef(10.0, 0.2, 6.8);
	glutSolidCube(1.5);
	glPopMatrix();

}


void bench()
{
	//right base
	glPushMatrix();
	glColor3f(0.51, 0.32, 0.52);
	glTranslatef(3.5, -1.4, 3.5);
	glScalef(1.5, 0.3, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();

	//right back
	glPushMatrix();
	glColor3f(0.521, 0.35, 0.58);
	glTranslatef(4.6, 0.58, 3.5);
	glRotatef(90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.2, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();

	//left base
	glPushMatrix();
	glColor3f(0.51, 0.32, 0.52);
	glTranslatef(-3.6, -1.4, 3.5);
	glScalef(1.5, 0.3, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();

	//left back
	glPushMatrix();
	glColor3f(0.521, 0.35, 0.58);
	glTranslatef(-4.6, 0.58, 3.5);
	glRotatef(-90, 0.0, 0.0, 1.0);
	glScalef(2.3, 0.2, 8.0);
	glutSolidCube(1.5);
	glPopMatrix();


}


void table()
{
	glPushMatrix();
	glColor3f(0.59, 0.44, 0.2);
	glTranslatef(-0.07, 0.0, 0.8);
	glScalef(3.0, 0.2, 4.2);
	glutSolidCube(1.5);
	glPopMatrix();
}


void queen()
{
	glColor3f(1.0, 0.54, 0.0);
	glPushMatrix();
	glTranslatef(0.0, 0.65, 0.0);
	glScalef(sx, sy, sz);
	glRotatef(90, 1.0, 0.0, 0.0);
	gluCylinder(quadObj, 0.8, 0.8, 1.0, 20, 20);
	glPopMatrix();

	glColor3f(red1, green1, blue1);
	glPushMatrix();
	glTranslatef(0.0, 0.80, 0.0);
	glScalef(sx, sy, sz);
	glutSolidSphere(0.8, 20, 20);
	glPopMatrix();

	glColor3f(1.0, 0.0, 0.0);
	glPushMatrix();
	glTranslatef(0.0, 0.95, 0.0);
	glScalef(sx, sy, sz);
	glRotatef(90, 1.0, 0.0, 0.0);
	gluCylinder(quadObj, 0.6, 0.8, 2.0, 20, 20);
	glPopMatrix();

	glColor3f(red1, green1, blue1);
	glPushMatrix();
	glTranslatef(0.0, 1.05, 0.0);
	glScalef(sx, sy, sz);
	glutSolidSphere(0.6, 20, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 0.0, 0.0);
	glTranslatef(-0.08, 1.10, 0.0);
	glScalef(0.08, 0.3, 0.08);
	glRotatef(-90, 1.0, 0.0, 0.0);
	glutSolidCone(0.2, 0.6, 30, 30);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 0.0, 0.0);
	glTranslatef(0.0, 1.10, 0.0);
	glScalef(sx, sy, sz);
	glRotatef(-90, 1.0, 0.0, 0.0);
	glutSolidCone(0.3, 0.8, 30, 30);
	glPopMatrix();

	glPushMatrix();
	glColor3f(1.0, 0.0, 0.0);
	glTranslatef(0.08, 1.10, 0.0);
	glScalef(0.08, 0.3, 0.08);
	glRotatef(-90, 1.0, 0.0, 0.0);
	glutSolidCone(0.2, 0.6, 30, 30);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.0, 1.13, 0.0);
	glScalef(sx, sy, sz);
	star();
	glPopMatrix();
}


void star()
{

	glColor3f(1.0, 0.0, 0.0);
	glPushMatrix();
	glTranslatef(0.0, 0.63, 0.0);
	glBegin(GL_TRIANGLES);
	glVertex3f(0.0, -0.1, 0.0);
	glVertex3f(-0.05, 0.02, 0.0);
	glVertex3f(0.05, 0.02, 0.0);
	glEnd();

	glBegin(GL_TRIANGLES);
	glVertex3f(-0.05, 0.02, 0.0);
	glVertex3f(-0.1, 0.04, 0.0);
	glVertex3f(-0.05, 0.06, 0.0);
	glEnd();

	glBegin(GL_TRIANGLES);
	glVertex3f(-0.05, 0.06, 0.0);
	glVertex3f(0.0, 0.25, 0.0);
	glVertex3f(0.05, 0.06, 0.0);
	glEnd();

	glBegin(GL_TRIANGLES);
	glVertex3f(0.05, 0.06, 0.0);
	glVertex3f(0.1, 0.04, 0.0);
	glVertex3f(0.05, 0.02, 0.0);
	glEnd();
	glPopMatrix();

}


void board()
{
	//1
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(-1.4, 0.25, 2.3);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//2
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(-0.50, 0.25, 2.3);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//3
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(0.4, 0.25, 2.3);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//4
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(1.3, 0.25, 2.3);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//5
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(-1.4, 0.25, 1.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//6
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(-0.5, 0.25, 1.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//7
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(0.4, 0.25, 1.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//8
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(1.3, 0.25, 1.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();


	//9
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(-1.4, 0.25, 0.5);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//10
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(-0.50, 0.25, 0.5);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//11
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(0.4, 0.25, 0.5);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//12
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(1.3, 0.25, 0.5);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();


	//13
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(-1.4, 0.25, -0.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//14
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(-0.50, 0.25, -0.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//15
	glPushMatrix();
	glColor3f(red0, green0, blue0);
	glTranslatef(0.4, 0.25, -0.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();

	//16
	glPushMatrix();
	glColor3f(red, green, blue);
	glTranslatef(1.3, 0.25, -0.4);
	glScalef(0.6, 0.00, 0.6);
	glutSolidCube(1.5);
	glPopMatrix();
}


void keys(unsigned char key, int x, int y)
{
	 if (key == 13) 
	 {
		 glutDisplayFunc(display);
	 }

	if (key == '6')
	{
		view[0] += 0.5;
		if (view[0] > 4.0)
			view[0] = 4.0;
	}
	if (key == '4')
	{
		view[0] -= 0.5;
		if (view[0] < -4.0)
			view[0] = -4.0;
	}

	if (key == '8')
	{
		view[1] += 0.5;
		if (view[1] > 7.0)
			view[1] = 7.0;
	}
	if (key == '2')
	{
		view[1] -= 0.5;
		if (view[1] < -1.5)
			view[1] = -1.5;
	}


	if (key == '0')
	{
		view[2] += 0.5;
		if (view[2] > 10.0)
			view[2] = 10.0;
	}
	if (key == '5')
	{
		view[2] -= 0.5;
		if (view[2] < 0.5)
			view[2] = 0.5;
	}

	display();
}


void arrows(int key,int x,int y)
{
	if (key == GLUT_KEY_UP)
	{
		flag++;
	}
	if (key == GLUT_KEY_DOWN)
	{
		flag--;
	}

}


void mainmenu(GLint op)
{
	switch (op)
	{
	case 8:	glutDisplayFunc(controls);
		break;
	case 9: exit(0);
		break;
	}
	glutPostRedisplay();
}


void time(GLint option)
{
	switch (option)
	{
	case 1:tim = 1;
		redb = 0.93; greenb = 0.91; blueb = 1.0;
		sun();
		break;
	case 2:tim = 0;
		redb = 0.52; greenb = 0.35; blueb = 0.53;
		moon();
		break;
	}
	glutPostRedisplay();

}


void firstdisplay()
{

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(75, 900 / 600, 1.0, 1000.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0, 0, 5, 0, 0, 0, 0, 1.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0.39, 0.58, 0.93, 1.0);	

	char str[] = "!!!  WELCOME  !!!";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.85, 3.4, 0);
	for (i = 0; i <18; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str[i]);
	}

	char str1[] = "GRAPHICAL  IMPLEMENTATION  OF  N-QUEENS  PROBLEM";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-2.2, 2.7, 0);
	for (i = 0; i <49; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str1[i]);
	}

	char str2[] = "Submitted by : ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.5, 1.7, 0);
	for (i = 0; i <16; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str2[i]);
	}


	char str3[] = "Shashi Kumar N";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.75, 1.2, 0);
	for (i = 0; i <16; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str3[i]);
	}

	char str4[] = "1MJ15CS136";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.6, 0.85, 0);
	for (i = 0; i <11; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str4[i]);
	}

	char str5[] = "6th Sem 'C' Sec,";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.7, 0.5, 0);
	for (i = 0; i <16; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str5[i]);
	}

	char str6[] = "MVJCE";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.35, 0.15, 0);
	for (i = 0; i <6; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str6[i]);
	}




	char str7[] = "Under the guidance of : ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.86, -0.8, 0);
	for (i = 0; i <25; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str7[i]);
	}


	char str8[] = "prof. Preethi Sheba Hepsiba";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.2, -1.35, 0);
	for (i = 0; i <28; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str8[i]);
	}

	char str9[] = "Assistant Professor,";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.8, -1.7, 0);
	for (i = 0; i <21; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str9[i]);
	}

	char str10[] = "Department of CSE,";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.83, -2.05, 0);
	for (i = 0; i <19; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str10[i]);
	}

	char str11[] = "MVJCE";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.35, -2.40, 0);
	for (i = 0; i <6; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, str11[i]);
	}

	char str12[] = " PRESS  ENTER  TO  GET  INTO  THE  TRAIN ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.7, -3.4, 0);
	for (i = 0; i <42; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str12[i]);
	}

	char str13[] = " PRESS  ENTER  TO  GET  INTO  THE  TRAIN ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.705, -3.415, 0);
	for (i = 0; i <42; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str13[i]);
	}


	glFlush();
	glutSwapBuffers();

}


void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(view[0], view[1], view[2], 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

	glPushMatrix();
	background();
	glPopMatrix();

	if (tim == 1) {
		glPushMatrix();
		sun();
		glPopMatrix();
	}

	if (tim == 0) {
		glPushMatrix();
		moon();
		glPopMatrix();
	}

	glPushMatrix();
	glTranslatef(w1, 0.0, 0.0);
	window();
	glPopMatrix();


	glPushMatrix();
	wall();
	glPopMatrix();

	//clock
	glPushMatrix();
	glTranslatef(-4.7, 6.4, 0.0);
	glRotatef(-90, 0.0, 0.0, 1.0);
	glScalef(0.4, 0.4, 0.4);
	clock();
	glPopMatrix();

	//time12dot
	glPushMatrix();
	glColor3f(0.3, 0.3, 0.3);
	glTranslatef(-4.63, 6.9, 0.0);
	glutSolidSphere(0.04, 20, 20);
	glPopMatrix();

	//time6dot
	glPushMatrix();
	glColor3f(0.3, 0.3, 0.3);
	glTranslatef(-4.63, 5.9, 0.0);
	glutSolidSphere(0.04, 20, 20);
	glPopMatrix();

	//time3dot
	glPushMatrix();
	glColor3f(0.3, 0.3, 0.3);
	glTranslatef(-4.63, 6.4, -0.5);
	glutSolidSphere(0.04, 20, 20);
	glPopMatrix();

	//time9dot
	glPushMatrix();
	glColor3f(0.3, 0.3, 0.3);
	glTranslatef(-4.63, 6.4, 0.5);
	glutSolidSphere(0.04, 20, 20);
	glPopMatrix();


	glPushMatrix();
	winright();
	glPopMatrix();

	glPushMatrix();
	winleft();
	glPopMatrix();


	glPushMatrix();
	board();
	glPopMatrix();

	glPushMatrix();
	table();
	glPopMatrix();

	glPushMatrix();
	bench();
	glPopMatrix();

	glPushMatrix();
	robo();
	glPopMatrix();

	//smallrobo1
	glPushMatrix();
	glTranslatef(6.75, 6.57, -0.5);
	glScalef(0.6, 0.5, 0.4);
	glRotatef(-60, 0.0, 1.0, 0.0);
	smallrobo();
	glPopMatrix();

	//smallrobo2
	glPushMatrix();
	glTranslatef(6.75, 6.57, 0.2);
	glScalef(0.6, 0.5, 0.4);
	glRotatef(-60, 0.0, 1.0, 0.0);
	smallrobo();
	glPopMatrix();

	//smallrobo3
	glPushMatrix();
	glTranslatef(6.75, 6.57, 0.9);
	glScalef(0.6, 0.5, 0.4);
	glRotatef(-60, 0.0, 1.0, 0.0);
	smallrobo();
	glPopMatrix();



	//q1
	glPushMatrix();
	glTranslatef(-1.4, 0.0, 4.1);
	glTranslatef(0.0, 0.0, -c1);
	queen();
	glPopMatrix();


	//q2
	glPushMatrix();
	glTranslatef(-0.5, 0.0, 4.1);
	glTranslatef(0.0, 0.0, -c2);
	queen();
	glPopMatrix();


	//q3
	glPushMatrix();
	glTranslatef(0.3, 0.0, 4.1);
	glTranslatef(0.0, 0.0, -c3);
	queen();
	glPopMatrix();


	//q4
	glPushMatrix();
	glTranslatef(1.2, 0.0, 4.1);
	glTranslatef(0.0, 0.0, -c4);
	queen();
	glPopMatrix();


	if (flag == 1)
	{
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glLineWidth(4);
		glBegin(GL_LINES);
		glVertex3f(-1.8, 0.30, 2.4);
		glVertex3f(1.7, 0.30, 2.4);
		glEnd();
		glPopMatrix();
	}


	if (flag == 2)
	{
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glLineWidth(4);
		glBegin(GL_LINES);
		glVertex3f(-1.8, 0.30, 1.5);
		glVertex3f(1.7, 0.30, 1.5);
		glEnd();

		glBegin(GL_LINES);
		glVertex3f(-0.9, 0.40, 2.7);
		glVertex3f(0.83, 0.40, 1.0);
		glEnd();

		glBegin(GL_LINES);
		glVertex3f(-0.08, 0.50, 2.8);
		glVertex3f(-1.75, 0.50, 1.1);

		glEnd();

		glPopMatrix();
	}



	if (flag == 3)
	{
		glPushMatrix();
		glColor3f(1.0, 0.0, 0.0);
		glLineWidth(3);
		glBegin(GL_LINES);
		glVertex3f(-1.8, 0.30, 0.6);
		glVertex3f(1.7, 0.30, 0.6);
		glEnd();

		glBegin(GL_LINES);
		glVertex3f(1.6, 0.50, 1.9);
		glVertex3f(0.0, 0.50, 0.2);

		glEnd();
		glPopMatrix();
	}

	if (flag == 4)
	{

		char str[] = "SOLUTION FOUND";
		glColor3f(1.0, 0.844, 0.0);
		glRasterPos3f(-0.7, 0.3, 3.5);

		for (i = 0; i <15; i++) {
			glutBitmapCharacter(GLUT_BITMAP_HELVETICA_10, str[i]);
		}
	}



	glFlush();
	glutSwapBuffers();
}


void controls()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(75, 900 / 600, 1.0, 1000.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0, 0, 5, 0, 0, 0, 0, 1.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0.39, 0.58, 0.93, 1.0);

	char str[] = "**  CONTROLS  **";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.6, 3.4, 0);
	for (i = 0; i <17; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str[i]);
	}

	char str1[] = "Use Keyboard Keys";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-0.7, 2.5, 0);
	for (i = 0; i <18; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str1[i]);
	}

	char str2[] = "arrow up      : To move the Queens front.";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3 , 2.1, 0);
	for (i = 0; i <42; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str2[i]);
	}


	char str3[] = "arrow down : To move the Queens back.";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, 1.7, 0);
	for (i = 0; i <38; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str3[i]);
	}

	char str4[] = "    6      : To view from positive X-axis. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, 1.3, 0);
	for (i = 0; i <44; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str4[i]);
	}

	char str5[] = "    4     : To view from negative X-axis. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, 0.9, 0);
	for (i = 0; i <43; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str5[i]);
	}

	char str6[] = "    8     : Top View. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, 0.5, 0);
	for (i = 0; i <23; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str6[i]);
	}

	char str7[] = "    2     : Bottom View. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, 0.1, 0);
	for (i = 0; i <26; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str7[i]);
	}

	char str8[] = "    5     : Zoom In. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, -0.3, 0);
	for (i = 0; i <22; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str8[i]);
	}

	char str9[] = "    0     : Zoom Out. ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.3, -0.7, 0);
	for (i = 0; i <23; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str9[i]);
	}

	char str10[] = " PRESS  ENTER  TO  GET  INTO  THE  TRAIN ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.5, -1.8, 0);
	for (i = 0; i <42; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str10[i]);
	}

	char str11[] = " PRESS  ENTER  TO  GET  INTO  THE  TRAIN ";
	glColor3f(1.0, 0.844, 0.0);
	glRasterPos3f(-1.49, -1.81, 0);
	for (i = 0; i <42; i++) {
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str11[i]);
	}



	glFlush();
	glutSwapBuffers();
}


void reset(GLint res)
{
	switch (res)
	{
	case 1: c1 = 0.9;
		c2 = 0.9;
		c3 = 0.9;
		c4 = 0.9;
		c5 = 0.9;
		flag = 0;
		break;

	case 2: view[0] = 0.0;
		view[1] = 6.0;
		view[2] = 8.0;
		break;
	case 3: sx = 0.2; sy = 0.35; sz = 0.2;
		break;
	case 4:
		red = 1.0, green = 1.0, blue = 1.0;
		red0 = 0.0, green0 = 0.0, blue0 = 0.0;
		break;
	}
}


void qcolor(GLint colorOption)
{
	switch (colorOption)
	{
	case 1: red1 = 1.0; green1 = 0.0; blue1 = 0.0;
		break;


	case 2: red1 = 0.0; green1 = 1.0; blue1 = 0.0;
		break;


	case 3: red1 = 0.0; green1 = 0.0; blue1 = 1.0;
		break;

	}
	glutPostRedisplay();
}


void win(GLint option)
{
	switch (option)
	{
	case 1:close = 1;

		break;

	case 2:
		close = 0;

		break;

	}
	glutPostRedisplay();

}


void reshape(int w, int h)
{
	glViewport(0, 0, w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(75, 900 / 600, 1.0, 1000.0);
	//glOrtho(-10, 10, -10, 10, 1, 1000);
	glMatrixMode(GL_MODELVIEW);
}


void windisplay()
{

	w1 += w1s;
	if (w1 > 30.0)
	{
		w1 = 0.0;

	}

	if (flag < 0)
	{
		flag = 0;
	}

	if (flag > 4)
	{
		flag = 4;
	}



	if (flag == 0) {

		c1 += 0.009;
		if (c1 > 0.9)
		{
			c1 = 0.9;
		}

		c2 += 0.009;
		if (c2 > 0.9)
		{
			c2 = 0.9;
		}

		c3 += 0.009;
		if (c3 > 0.9)
		{
			c3 = 0.9;
		}

		c4 += 0.009;
		if (c4 > 0.9)
		{
			c4 = 0.9;
		}


	}




	if (flag == 1) {

		c1 += 0.009;
		if (c1 > 1.8)
		{
			c1 = 1.8;
		}

		c2 += 0.009;
		if (c2 > 1.8)
		{
			c2 = 1.8;
		}

		c3 += 0.009;
		if (c3 > 1.8)
		{
			c3 = 1.8;
		}

		c4 += 0.009;
		if (c4 > 1.8)
		{
			c4 = 1.8;
		}


	}


	if (flag == 2) {

		c1 += 0.009;
		if (c1 > 2.7)
		{
			c1 = 2.7;
		}

		c3 += 0.009;
		if (c3 > 2.7)
		{
			c3 = 2.7;
		}

		c4 += 0.009;
		if (c4 > 2.7)
		{
			c4 = 2.7;
		}


	}


	if (flag == 3) {

		c1 += 0.009;
		if (c1 >3.6)
		{
			c1 = 3.6;
		}

		c3 += 0.009;
		if (c3 > 3.6)
		{
			c3 = 3.6;
		}

	}

	if (flag == 4)
	{
		c3 += 0.009;
		if (c3 > 4.5)
		{
			c3 = 4.5;
		}
	}




	if (close == 1) {
		m1 += 0.010;
		if (m1 > 3.14)
		{
			m1 = 3.14;
		}
	}
	else {
		m1 -= 0.010;
		if (m1 < 0)
		{
			m1 = 0;
		}
	}

	glutPostRedisplay();


}


void size(GLint option)
{
	switch (option)
	{
	case 1:sx = 0.15; sy = 0.25; sz = 0.15;
		break;
	case 2: 0.3; sy = 0.5; sz = 0.3;
		break;
	}

}


void speed(GLint option)
{
	switch (option)
	{
	case 1:w1s = 0.01;
		break;
	case 2:w1s = 0.03;
		break;

	case 3:w1s = 0.06;
		break;
	}

}


void init()
{

	glClearColor(1.0, 1.0, 1.0, 1.0);

}


void theme(GLint theme)
{
	switch (theme)
	{
	case 1:
		red = 0.69, green = 0.89, blue = 0.73;
		red0 = 0.44, green0 = 0.64, blue0 = 0.64;
		break;

	case 2:
		red = 0.5, green = 0.5, blue = 0.5;
		red0 = 0.0, green0 = 0.5, blue0 = 0.5;
		break;

	case 3:
		red = 0.8, green = 0.72, blue = 0.68;
		red0 = 0.44, green0 = 0.4, blue0 = 0.47;
		break;

	case 4:
		red = 0.89, green = 0.76, blue = 0.44;
		red0 = 0.72, green0 = 0.55, blue0 = 0.29;
		break;

	case 5:red = 0.92, green = 0.94, blue = 0.81;
		red0 = 0.73, green0 = 0.75, blue0 = 0.39;
		break;
	}
}


int main(int argc, char** argv)
{

	GLint subq;
	GLint r;
	GLint wind;
	GLint sizes;
	GLint themes;
	GLint times;
	GLint speeds;

	glutInit(&argc, argv);
	quadObj = gluNewQuadric();
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(900, 600);
	glutInitWindowPosition(200, 50);
	glutCreateWindow("N-QUEEN PROBLEM");
	init();
	glutDisplayFunc(firstdisplay);
	glutIdleFunc(windisplay);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keys);
	glutSpecialFunc(arrows);

	subq = glutCreateMenu(qcolor);
	glutAddMenuEntry("RED", 1);
	glutAddMenuEntry("GREEN", 2);
	glutAddMenuEntry("BLUE", 3);


	speeds = glutCreateMenu(speed);
	glutAddMenuEntry("SLOW", 1);
	glutAddMenuEntry("NORMAL", 2);
	glutAddMenuEntry("FAST", 3);


	sizes = glutCreateMenu(size);
	glutAddMenuEntry("SMALL", 1);
	glutAddMenuEntry("BIG", 2);

	times = glutCreateMenu(time);
	glutAddMenuEntry("DAY", 1);
	glutAddMenuEntry("NIGHT", 2);

	themes = glutCreateMenu(theme);
	glutAddMenuEntry("CORAL", 1);
	glutAddMenuEntry("GREY-BROWN", 2);
	glutAddMenuEntry("DUSK", 3);
	glutAddMenuEntry("SANDCASTLE", 4);
	glutAddMenuEntry("WHEAT", 5);


	r = glutCreateMenu(reset);
	glutAddMenuEntry("QUEENS", 1);
	glutAddMenuEntry("CAMERA", 2);
	glutAddMenuEntry("QUEEN SIZE", 3);
	glutAddMenuEntry("THEME", 4);

	wind = glutCreateMenu(win);
	glutAddMenuEntry("CLOSE", 1);
	glutAddMenuEntry("OPEN", 2);


	glutCreateMenu(mainmenu);
	glutAddSubMenu(" QUEEN COLOR", subq);
	glutAddSubMenu(" QUEEN SIZE", sizes);
	glutAddSubMenu(" THEME", themes);
	glutAddSubMenu(" WINDOW", wind);
	glutAddSubMenu(" TIME", times);
	glutAddSubMenu(" TRAIN SPEED", speeds);
	glutAddSubMenu(" RESET", r);
	glutAddMenuEntry(" HELP", 8);
	glutAddMenuEntry(" EXIT", 9);
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glEnable(GL_DEPTH_TEST);
	glutMainLoop();
	return 0;
}

